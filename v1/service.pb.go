// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1/service.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SdkVersion int32

const (
	SdkVersion__  SdkVersion = 0
	SdkVersion_V1 SdkVersion = 1
)

var SdkVersion_name = map[int32]string{
	0: "_",
	1: "V1",
}

var SdkVersion_value = map[string]int32{
	"_":  0,
	"V1": 1,
}

func (x SdkVersion) String() string {
	return proto.EnumName(SdkVersion_name, int32(x))
}

func (SdkVersion) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d3e34d69331f2f1a, []int{0}
}

type Code int32

const (
	Code_OK     Code = 0
	Code_Failed Code = 1
)

var Code_name = map[int32]string{
	0: "OK",
	1: "Failed",
}

var Code_value = map[string]int32{
	"OK":     0,
	"Failed": 1,
}

func (x Code) String() string {
	return proto.EnumName(Code_name, int32(x))
}

func (Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d3e34d69331f2f1a, []int{1}
}

type RosterType int32

const (
	RosterType_None  RosterType = 0
	RosterType_Both  RosterType = 1
	RosterType_Block RosterType = 2
	RosterType_Black RosterType = 3
)

var RosterType_name = map[int32]string{
	0: "None",
	1: "Both",
	2: "Block",
	3: "Black",
}

var RosterType_value = map[string]int32{
	"None":  0,
	"Both":  1,
	"Block": 2,
	"Black": 3,
}

func (x RosterType) String() string {
	return proto.EnumName(RosterType_name, int32(x))
}

func (RosterType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d3e34d69331f2f1a, []int{2}
}

type Page struct {
	Size                 int32    `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Number               int32    `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Page) Reset()         { *m = Page{} }
func (m *Page) String() string { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()    {}
func (*Page) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3e34d69331f2f1a, []int{0}
}

func (m *Page) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Page.Unmarshal(m, b)
}
func (m *Page) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Page.Marshal(b, m, deterministic)
}
func (m *Page) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Page.Merge(m, src)
}
func (m *Page) XXX_Size() int {
	return xxx_messageInfo_Page.Size(m)
}
func (m *Page) XXX_DiscardUnknown() {
	xxx_messageInfo_Page.DiscardUnknown(m)
}

var xxx_messageInfo_Page proto.InternalMessageInfo

func (m *Page) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Page) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type Result struct {
	Code                 Code     `protobuf:"varint,1,opt,name=code,proto3,enum=v1.Code" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3e34d69331f2f1a, []int{1}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_OK
}

func (m *Result) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type Feature struct {
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version              int32    `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	Desc                 string   `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Feature) Reset()         { *m = Feature{} }
func (m *Feature) String() string { return proto.CompactTextString(m) }
func (*Feature) ProtoMessage()    {}
func (*Feature) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3e34d69331f2f1a, []int{2}
}

func (m *Feature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Feature.Unmarshal(m, b)
}
func (m *Feature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Feature.Marshal(b, m, deterministic)
}
func (m *Feature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feature.Merge(m, src)
}
func (m *Feature) XXX_Size() int {
	return xxx_messageInfo_Feature.Size(m)
}
func (m *Feature) XXX_DiscardUnknown() {
	xxx_messageInfo_Feature.DiscardUnknown(m)
}

var xxx_messageInfo_Feature proto.InternalMessageInfo

func (m *Feature) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Feature) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Feature) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type FeatureQuery struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeatureQuery) Reset()         { *m = FeatureQuery{} }
func (m *FeatureQuery) String() string { return proto.CompactTextString(m) }
func (*FeatureQuery) ProtoMessage()    {}
func (*FeatureQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3e34d69331f2f1a, []int{3}
}

func (m *FeatureQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureQuery.Unmarshal(m, b)
}
func (m *FeatureQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureQuery.Marshal(b, m, deterministic)
}
func (m *FeatureQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureQuery.Merge(m, src)
}
func (m *FeatureQuery) XXX_Size() int {
	return xxx_messageInfo_FeatureQuery.Size(m)
}
func (m *FeatureQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureQuery.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureQuery proto.InternalMessageInfo

func (m *FeatureQuery) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type FeatureList struct {
	List                 []*Feature `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *FeatureList) Reset()         { *m = FeatureList{} }
func (m *FeatureList) String() string { return proto.CompactTextString(m) }
func (*FeatureList) ProtoMessage()    {}
func (*FeatureList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3e34d69331f2f1a, []int{4}
}

func (m *FeatureList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureList.Unmarshal(m, b)
}
func (m *FeatureList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureList.Marshal(b, m, deterministic)
}
func (m *FeatureList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureList.Merge(m, src)
}
func (m *FeatureList) XXX_Size() int {
	return xxx_messageInfo_FeatureList.Size(m)
}
func (m *FeatureList) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureList.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureList proto.InternalMessageInfo

func (m *FeatureList) GetList() []*Feature {
	if m != nil {
		return m.List
	}
	return nil
}

type User struct {
	Domain               string   `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NickName             string   `protobuf:"bytes,4,opt,name=nickName,proto3" json:"nickName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3e34d69331f2f1a, []int{5}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

type UserAccount struct {
	Domain               string   `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Device               string   `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Passwd               string   `protobuf:"bytes,4,opt,name=passwd,proto3" json:"passwd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserAccount) Reset()         { *m = UserAccount{} }
func (m *UserAccount) String() string { return proto.CompactTextString(m) }
func (*UserAccount) ProtoMessage()    {}
func (*UserAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3e34d69331f2f1a, []int{6}
}

func (m *UserAccount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserAccount.Unmarshal(m, b)
}
func (m *UserAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserAccount.Marshal(b, m, deterministic)
}
func (m *UserAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAccount.Merge(m, src)
}
func (m *UserAccount) XXX_Size() int {
	return xxx_messageInfo_UserAccount.Size(m)
}
func (m *UserAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAccount.DiscardUnknown(m)
}

var xxx_messageInfo_UserAccount proto.InternalMessageInfo

func (m *UserAccount) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *UserAccount) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *UserAccount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserAccount) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

type UserInfo struct {
	Extension            map[string]string `protobuf:"bytes,1,rep,name=extension,proto3" json:"extension,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	User                 *User             `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Gender               string            `protobuf:"bytes,3,opt,name=gender,proto3" json:"gender,omitempty"`
	Country              string            `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	Organization         string            `protobuf:"bytes,5,opt,name=organization,proto3" json:"organization,omitempty"`
	Email                string            `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	Phone                string            `protobuf:"bytes,7,opt,name=phone,proto3" json:"phone,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UserInfo) Reset()         { *m = UserInfo{} }
func (m *UserInfo) String() string { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()    {}
func (*UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3e34d69331f2f1a, []int{7}
}

func (m *UserInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserInfo.Unmarshal(m, b)
}
func (m *UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserInfo.Marshal(b, m, deterministic)
}
func (m *UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfo.Merge(m, src)
}
func (m *UserInfo) XXX_Size() int {
	return xxx_messageInfo_UserInfo.Size(m)
}
func (m *UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfo proto.InternalMessageInfo

func (m *UserInfo) GetExtension() map[string]string {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *UserInfo) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserInfo) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *UserInfo) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *UserInfo) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *UserInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserInfo) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

type ClientInfo struct {
	Extension            map[string]string `protobuf:"bytes,1,rep,name=extension,proto3" json:"extension,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ClientType           string            `protobuf:"bytes,2,opt,name=clientType,proto3" json:"clientType,omitempty"`
	ClientVersion        string            `protobuf:"bytes,3,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
	OsType               string            `protobuf:"bytes,4,opt,name=osType,proto3" json:"osType,omitempty"`
	OsVersion            string            `protobuf:"bytes,5,opt,name=osVersion,proto3" json:"osVersion,omitempty"`
	DeviceType           string            `protobuf:"bytes,6,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	DeviceNumber         string            `protobuf:"bytes,7,opt,name=deviceNumber,proto3" json:"deviceNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ClientInfo) Reset()         { *m = ClientInfo{} }
func (m *ClientInfo) String() string { return proto.CompactTextString(m) }
func (*ClientInfo) ProtoMessage()    {}
func (*ClientInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3e34d69331f2f1a, []int{8}
}

func (m *ClientInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientInfo.Unmarshal(m, b)
}
func (m *ClientInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientInfo.Marshal(b, m, deterministic)
}
func (m *ClientInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientInfo.Merge(m, src)
}
func (m *ClientInfo) XXX_Size() int {
	return xxx_messageInfo_ClientInfo.Size(m)
}
func (m *ClientInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClientInfo proto.InternalMessageInfo

func (m *ClientInfo) GetExtension() map[string]string {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *ClientInfo) GetClientType() string {
	if m != nil {
		return m.ClientType
	}
	return ""
}

func (m *ClientInfo) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *ClientInfo) GetOsType() string {
	if m != nil {
		return m.OsType
	}
	return ""
}

func (m *ClientInfo) GetOsVersion() string {
	if m != nil {
		return m.OsVersion
	}
	return ""
}

func (m *ClientInfo) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *ClientInfo) GetDeviceNumber() string {
	if m != nil {
		return m.DeviceNumber
	}
	return ""
}

type Session struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LoginTime            int64    `protobuf:"varint,2,opt,name=loginTime,proto3" json:"loginTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Session) Reset()         { *m = Session{} }
func (m *Session) String() string { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()    {}
func (*Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3e34d69331f2f1a, []int{9}
}

func (m *Session) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Session.Unmarshal(m, b)
}
func (m *Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Session.Marshal(b, m, deterministic)
}
func (m *Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Session.Merge(m, src)
}
func (m *Session) XXX_Size() int {
	return xxx_messageInfo_Session.Size(m)
}
func (m *Session) XXX_DiscardUnknown() {
	xxx_messageInfo_Session.DiscardUnknown(m)
}

var xxx_messageInfo_Session proto.InternalMessageInfo

func (m *Session) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Session) GetLoginTime() int64 {
	if m != nil {
		return m.LoginTime
	}
	return 0
}

type ChatMessage struct {
	Extension            map[string]string `protobuf:"bytes,1,rep,name=extension,proto3" json:"extension,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Id                   uint64            `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Type                 uint32            `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Domain               string            `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	From                 string            `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	To                   string            `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`
	Msg                  string            `protobuf:"bytes,7,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ChatMessage) Reset()         { *m = ChatMessage{} }
func (m *ChatMessage) String() string { return proto.CompactTextString(m) }
func (*ChatMessage) ProtoMessage()    {}
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3e34d69331f2f1a, []int{10}
}

func (m *ChatMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatMessage.Unmarshal(m, b)
}
func (m *ChatMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatMessage.Marshal(b, m, deterministic)
}
func (m *ChatMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatMessage.Merge(m, src)
}
func (m *ChatMessage) XXX_Size() int {
	return xxx_messageInfo_ChatMessage.Size(m)
}
func (m *ChatMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ChatMessage proto.InternalMessageInfo

func (m *ChatMessage) GetExtension() map[string]string {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *ChatMessage) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChatMessage) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ChatMessage) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ChatMessage) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ChatMessage) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *ChatMessage) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type AckMessage struct {
	Domain               string   `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	From                 string   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To                   string   `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Id                   uint64   `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckMessage) Reset()         { *m = AckMessage{} }
func (m *AckMessage) String() string { return proto.CompactTextString(m) }
func (*AckMessage) ProtoMessage()    {}
func (*AckMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3e34d69331f2f1a, []int{11}
}

func (m *AckMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AckMessage.Unmarshal(m, b)
}
func (m *AckMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AckMessage.Marshal(b, m, deterministic)
}
func (m *AckMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckMessage.Merge(m, src)
}
func (m *AckMessage) XXX_Size() int {
	return xxx_messageInfo_AckMessage.Size(m)
}
func (m *AckMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AckMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AckMessage proto.InternalMessageInfo

func (m *AckMessage) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *AckMessage) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *AckMessage) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *AckMessage) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Heartbeat struct {
	Domain               string   `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	From                 string   `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Index                uint64   `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	ClientTime           int64    `protobuf:"varint,4,opt,name=clientTime,proto3" json:"clientTime,omitempty"`
	ServerTime           int64    `protobuf:"varint,5,opt,name=serverTime,proto3" json:"serverTime,omitempty"`
	NextDuration         int64    `protobuf:"varint,6,opt,name=nextDuration,proto3" json:"nextDuration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Heartbeat) Reset()         { *m = Heartbeat{} }
func (m *Heartbeat) String() string { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()    {}
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3e34d69331f2f1a, []int{12}
}

func (m *Heartbeat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Heartbeat.Unmarshal(m, b)
}
func (m *Heartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Heartbeat.Marshal(b, m, deterministic)
}
func (m *Heartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Heartbeat.Merge(m, src)
}
func (m *Heartbeat) XXX_Size() int {
	return xxx_messageInfo_Heartbeat.Size(m)
}
func (m *Heartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_Heartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_Heartbeat proto.InternalMessageInfo

func (m *Heartbeat) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Heartbeat) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Heartbeat) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Heartbeat) GetClientTime() int64 {
	if m != nil {
		return m.ClientTime
	}
	return 0
}

func (m *Heartbeat) GetServerTime() int64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (m *Heartbeat) GetNextDuration() int64 {
	if m != nil {
		return m.NextDuration
	}
	return 0
}

type MUCInfo struct {
	Extension            map[string]string `protobuf:"bytes,1,rep,name=extension,proto3" json:"extension,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Domain               string            `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Id                   uint64            `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Type                 int32             `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	Name                 string            `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MUCInfo) Reset()         { *m = MUCInfo{} }
func (m *MUCInfo) String() string { return proto.CompactTextString(m) }
func (*MUCInfo) ProtoMessage()    {}
func (*MUCInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3e34d69331f2f1a, []int{13}
}

func (m *MUCInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MUCInfo.Unmarshal(m, b)
}
func (m *MUCInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MUCInfo.Marshal(b, m, deterministic)
}
func (m *MUCInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MUCInfo.Merge(m, src)
}
func (m *MUCInfo) XXX_Size() int {
	return xxx_messageInfo_MUCInfo.Size(m)
}
func (m *MUCInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MUCInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MUCInfo proto.InternalMessageInfo

func (m *MUCInfo) GetExtension() map[string]string {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *MUCInfo) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *MUCInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MUCInfo) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *MUCInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type MUCList struct {
	Page                 *Page      `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Muc                  []*MUCInfo `protobuf:"bytes,2,rep,name=muc,proto3" json:"muc,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MUCList) Reset()         { *m = MUCList{} }
func (m *MUCList) String() string { return proto.CompactTextString(m) }
func (*MUCList) ProtoMessage()    {}
func (*MUCList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3e34d69331f2f1a, []int{14}
}

func (m *MUCList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MUCList.Unmarshal(m, b)
}
func (m *MUCList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MUCList.Marshal(b, m, deterministic)
}
func (m *MUCList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MUCList.Merge(m, src)
}
func (m *MUCList) XXX_Size() int {
	return xxx_messageInfo_MUCList.Size(m)
}
func (m *MUCList) XXX_DiscardUnknown() {
	xxx_messageInfo_MUCList.DiscardUnknown(m)
}

var xxx_messageInfo_MUCList proto.InternalMessageInfo

func (m *MUCList) GetPage() *Page {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *MUCList) GetMuc() []*MUCInfo {
	if m != nil {
		return m.Muc
	}
	return nil
}

type Roster struct {
	User                 *User      `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Type                 RosterType `protobuf:"varint,2,opt,name=type,proto3,enum=v1.RosterType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Roster) Reset()         { *m = Roster{} }
func (m *Roster) String() string { return proto.CompactTextString(m) }
func (*Roster) ProtoMessage()    {}
func (*Roster) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3e34d69331f2f1a, []int{15}
}

func (m *Roster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Roster.Unmarshal(m, b)
}
func (m *Roster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Roster.Marshal(b, m, deterministic)
}
func (m *Roster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Roster.Merge(m, src)
}
func (m *Roster) XXX_Size() int {
	return xxx_messageInfo_Roster.Size(m)
}
func (m *Roster) XXX_DiscardUnknown() {
	xxx_messageInfo_Roster.DiscardUnknown(m)
}

var xxx_messageInfo_Roster proto.InternalMessageInfo

func (m *Roster) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Roster) GetType() RosterType {
	if m != nil {
		return m.Type
	}
	return RosterType_None
}

type RosterList struct {
	Page                 *Page    `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	User                 []*User  `protobuf:"bytes,2,rep,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RosterList) Reset()         { *m = RosterList{} }
func (m *RosterList) String() string { return proto.CompactTextString(m) }
func (*RosterList) ProtoMessage()    {}
func (*RosterList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3e34d69331f2f1a, []int{16}
}

func (m *RosterList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RosterList.Unmarshal(m, b)
}
func (m *RosterList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RosterList.Marshal(b, m, deterministic)
}
func (m *RosterList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RosterList.Merge(m, src)
}
func (m *RosterList) XXX_Size() int {
	return xxx_messageInfo_RosterList.Size(m)
}
func (m *RosterList) XXX_DiscardUnknown() {
	xxx_messageInfo_RosterList.DiscardUnknown(m)
}

var xxx_messageInfo_RosterList proto.InternalMessageInfo

func (m *RosterList) GetPage() *Page {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *RosterList) GetUser() []*User {
	if m != nil {
		return m.User
	}
	return nil
}

func init() {
	proto.RegisterEnum("v1.SdkVersion", SdkVersion_name, SdkVersion_value)
	proto.RegisterEnum("v1.Code", Code_name, Code_value)
	proto.RegisterEnum("v1.RosterType", RosterType_name, RosterType_value)
	proto.RegisterType((*Page)(nil), "v1.Page")
	proto.RegisterType((*Result)(nil), "v1.Result")
	proto.RegisterType((*Feature)(nil), "v1.Feature")
	proto.RegisterType((*FeatureQuery)(nil), "v1.FeatureQuery")
	proto.RegisterType((*FeatureList)(nil), "v1.FeatureList")
	proto.RegisterType((*User)(nil), "v1.User")
	proto.RegisterType((*UserAccount)(nil), "v1.UserAccount")
	proto.RegisterType((*UserInfo)(nil), "v1.UserInfo")
	proto.RegisterMapType((map[string]string)(nil), "v1.UserInfo.ExtensionEntry")
	proto.RegisterType((*ClientInfo)(nil), "v1.ClientInfo")
	proto.RegisterMapType((map[string]string)(nil), "v1.ClientInfo.ExtensionEntry")
	proto.RegisterType((*Session)(nil), "v1.Session")
	proto.RegisterType((*ChatMessage)(nil), "v1.ChatMessage")
	proto.RegisterMapType((map[string]string)(nil), "v1.ChatMessage.ExtensionEntry")
	proto.RegisterType((*AckMessage)(nil), "v1.AckMessage")
	proto.RegisterType((*Heartbeat)(nil), "v1.Heartbeat")
	proto.RegisterType((*MUCInfo)(nil), "v1.MUCInfo")
	proto.RegisterMapType((map[string]string)(nil), "v1.MUCInfo.ExtensionEntry")
	proto.RegisterType((*MUCList)(nil), "v1.MUCList")
	proto.RegisterType((*Roster)(nil), "v1.Roster")
	proto.RegisterType((*RosterList)(nil), "v1.RosterList")
}

func init() { proto.RegisterFile("v1/service.proto", fileDescriptor_d3e34d69331f2f1a) }

var fileDescriptor_d3e34d69331f2f1a = []byte{
	// 1233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xcd, 0x72, 0xdb, 0x36,
	0x10, 0x16, 0x29, 0x4a, 0xb2, 0x56, 0xb2, 0xa2, 0xc1, 0x64, 0x32, 0x1a, 0xe6, 0xb7, 0x48, 0x3a,
	0x71, 0x7d, 0x70, 0x6a, 0xf5, 0x27, 0x6e, 0x9b, 0x8b, 0xa3, 0xd8, 0xf9, 0xf3, 0x4f, 0x4b, 0xc7,
	0x99, 0xde, 0x3a, 0xb4, 0x88, 0xc8, 0x1c, 0x49, 0x80, 0x86, 0x84, 0x54, 0x2b, 0x6f, 0xd0, 0xbe,
	0x46, 0x9f, 0xa0, 0x7d, 0x82, 0xde, 0x7a, 0xee, 0xf3, 0xf4, 0xd2, 0x59, 0x00, 0xfc, 0x93, 0x62,
	0x25, 0x33, 0xbe, 0x61, 0x17, 0x1f, 0x16, 0xbb, 0xdf, 0x2e, 0x76, 0x49, 0x68, 0xcf, 0xb6, 0x1f,
	0xc5, 0x2c, 0x9a, 0x85, 0x7d, 0xb6, 0x35, 0x89, 0x84, 0x14, 0xc4, 0x9e, 0x6d, 0xd3, 0x2e, 0x38,
	0x3f, 0xfa, 0x03, 0x46, 0x08, 0x38, 0x71, 0xf8, 0x9e, 0x75, 0xac, 0x7b, 0xd6, 0x46, 0xc5, 0x53,
	0x6b, 0x72, 0x03, 0xaa, 0x7c, 0x3a, 0x3e, 0x63, 0x51, 0xc7, 0x56, 0x5a, 0x23, 0xd1, 0x1d, 0xa8,
	0x7a, 0x2c, 0x9e, 0x8e, 0x24, 0xb9, 0x05, 0x4e, 0x5f, 0x04, 0xfa, 0x54, 0xab, 0xbb, 0xb6, 0x35,
	0xdb, 0xde, 0xea, 0x89, 0x80, 0x79, 0x4a, 0x4b, 0xda, 0x50, 0x1e, 0xc7, 0x03, 0x75, 0xb8, 0xee,
	0xe1, 0x92, 0xbe, 0x86, 0xda, 0x3e, 0xf3, 0xe5, 0x34, 0x52, 0x17, 0x72, 0x7f, 0xcc, 0xcc, 0xae,
	0x5a, 0x93, 0x0e, 0xd4, 0x66, 0x2c, 0x8a, 0x43, 0xc1, 0x3b, 0x65, 0x75, 0x63, 0x22, 0x22, 0x3a,
	0x60, 0x71, 0xbf, 0xe3, 0x68, 0x34, 0xae, 0x29, 0x85, 0xa6, 0x31, 0xf6, 0xd3, 0x94, 0x45, 0xf3,
	0xd4, 0xa2, 0x95, 0x59, 0xa4, 0x5b, 0xd0, 0x30, 0x98, 0x83, 0x30, 0x96, 0xe4, 0x2e, 0x38, 0xa3,
	0x30, 0x96, 0x1d, 0xeb, 0x5e, 0x79, 0xa3, 0xd1, 0x6d, 0xa0, 0xbf, 0x66, 0xdb, 0x53, 0x1b, 0xf4,
	0x08, 0x9c, 0xd3, 0x98, 0x45, 0x18, 0x7a, 0x20, 0xc6, 0x7e, 0xc8, 0x8d, 0x35, 0x23, 0x7d, 0xd0,
	0x6b, 0x17, 0xd6, 0x78, 0xd8, 0x1f, 0x1e, 0xa1, 0x5e, 0xfb, 0x97, 0xca, 0x34, 0x84, 0x06, 0xda,
	0xdb, 0xed, 0xf7, 0xc5, 0x94, 0xcb, 0x4b, 0xcd, 0xa2, 0x9e, 0x61, 0x66, 0x8c, 0x61, 0x23, 0xa5,
	0xd7, 0x95, 0x73, 0xd7, 0xdd, 0x80, 0xea, 0xc4, 0x8f, 0xe3, 0x5f, 0x03, 0x73, 0x99, 0x91, 0xe8,
	0x1f, 0x36, 0xac, 0xe1, 0x5d, 0x2f, 0xf9, 0x3b, 0x41, 0xbe, 0x83, 0x3a, 0xbb, 0x90, 0x8c, 0x2b,
	0x2e, 0x75, 0xb4, 0x37, 0x31, 0xda, 0x04, 0xb0, 0xb5, 0x97, 0xec, 0xee, 0x71, 0x19, 0xcd, 0xbd,
	0x0c, 0x8d, 0x39, 0x9d, 0xc6, 0x26, 0xe7, 0x0d, 0x9d, 0x53, 0x3c, 0xe5, 0x29, 0x2d, 0xde, 0x3e,
	0x60, 0x3c, 0x60, 0x91, 0xf1, 0xc9, 0x48, 0x98, 0x3a, 0x15, 0x62, 0x34, 0x37, 0x6e, 0x25, 0x22,
	0xa1, 0xd0, 0x14, 0xd1, 0xc0, 0xe7, 0xe1, 0x7b, 0x5f, 0xa2, 0x37, 0x15, 0xb5, 0x5d, 0xd0, 0x91,
	0xeb, 0x50, 0x61, 0x63, 0x3f, 0x1c, 0x75, 0xaa, 0x6a, 0x53, 0x0b, 0xa8, 0x9d, 0x9c, 0x0b, 0xce,
	0x3a, 0x35, 0xad, 0x55, 0x82, 0xfb, 0x04, 0x5a, 0x45, 0xe7, 0xb1, 0xce, 0x86, 0x6c, 0x6e, 0x28,
	0xc5, 0x25, 0x9e, 0x9c, 0xf9, 0xa3, 0x69, 0x42, 0xa7, 0x16, 0xbe, 0xb7, 0x77, 0x2c, 0xfa, 0x8f,
	0x0d, 0xd0, 0x1b, 0x85, 0x8c, 0x4b, 0xc5, 0xd3, 0x0f, 0xcb, 0x3c, 0xdd, 0x56, 0x55, 0x9c, 0x42,
	0x56, 0x30, 0x75, 0x07, 0xa0, 0xaf, 0x70, 0x6f, 0xe6, 0x93, 0xe4, 0xaa, 0x9c, 0x86, 0x3c, 0x80,
	0x75, 0x2d, 0xbd, 0xcd, 0x15, 0x75, 0xdd, 0x2b, 0x2a, 0x91, 0x51, 0x11, 0x2b, 0x0b, 0x26, 0x9f,
	0x5a, 0x22, 0xb7, 0xa0, 0x2e, 0xe2, 0xe4, 0xa4, 0x26, 0x2d, 0x53, 0xe0, 0xdd, 0xba, 0x46, 0xd4,
	0x49, 0x4d, 0x5b, 0x4e, 0x83, 0xac, 0x6b, 0xe9, 0x48, 0xbf, 0x60, 0x4d, 0x61, 0x41, 0x77, 0x45,
	0x26, 0x1f, 0x43, 0xed, 0x84, 0xc5, 0xca, 0x99, 0x16, 0xd8, 0x61, 0xa0, 0x4e, 0x39, 0x9e, 0x1d,
	0x06, 0xe8, 0xfa, 0x48, 0x0c, 0x42, 0xfe, 0x26, 0x34, 0x4f, 0xa5, 0xec, 0x65, 0x0a, 0xfa, 0x9f,
	0x05, 0x8d, 0xde, 0xb9, 0x2f, 0x0f, 0x59, 0x1c, 0x63, 0xeb, 0x79, 0xb2, 0x9c, 0x83, 0x3b, 0x2a,
	0x07, 0x19, 0x66, 0x45, 0x12, 0xf4, 0xdd, 0x76, 0x7a, 0x37, 0x01, 0x47, 0x22, 0x25, 0xc8, 0xf5,
	0xba, 0xa7, 0xd6, 0xb9, 0x67, 0xe7, 0x2c, 0xbe, 0xe6, 0x77, 0x91, 0x18, 0x1b, 0x76, 0xd5, 0x1a,
	0xed, 0x49, 0x61, 0x08, 0xb5, 0xa5, 0x48, 0x9a, 0x58, 0x2d, 0x6d, 0x62, 0x57, 0xa4, 0xed, 0x67,
	0x80, 0xdd, 0xfe, 0x30, 0x89, 0xfd, 0x63, 0x9e, 0x59, 0x4b, 0x9e, 0xd9, 0xa9, 0x67, 0x3a, 0xf2,
	0x72, 0x12, 0x39, 0xfd, 0xd3, 0x82, 0xfa, 0x0b, 0xe6, 0x47, 0xf2, 0x8c, 0xf9, 0x72, 0x55, 0x07,
	0x53, 0x96, 0xed, 0x9c, 0xe5, 0xeb, 0x50, 0x09, 0x79, 0xc0, 0x2e, 0x8c, 0x31, 0x2d, 0xe4, 0xca,
	0x3b, 0x34, 0x9d, 0xad, 0xec, 0xe5, 0x34, 0xb8, 0x8f, 0xf3, 0x84, 0x45, 0x6a, 0xbf, 0xa2, 0xf7,
	0x33, 0x0d, 0x96, 0x20, 0x67, 0x17, 0xf2, 0xd9, 0x34, 0xd2, 0x0f, 0xbf, 0xaa, 0x10, 0x05, 0x1d,
	0xfd, 0xd7, 0x82, 0xda, 0xe1, 0x69, 0x4f, 0xbd, 0xc5, 0x9d, 0xe5, 0x3a, 0x70, 0xb1, 0x0e, 0xcc,
	0xfe, 0x8a, 0x1a, 0xc8, 0x62, 0xb5, 0x0b, 0xb1, 0x2e, 0x30, 0x94, 0xd6, 0x86, 0xa3, 0x87, 0x9c,
	0xaa, 0x8d, 0xa4, 0xc5, 0x56, 0xb2, 0x16, 0x7b, 0xc5, 0x0c, 0xef, 0xab, 0x90, 0xd4, 0xbc, 0xb9,
	0x05, 0xce, 0xc4, 0x1f, 0xe8, 0x91, 0x64, 0x7a, 0x29, 0x4e, 0x5b, 0x4f, 0x69, 0xc9, 0x6d, 0x28,
	0x8f, 0xa7, 0xfd, 0x8e, 0x9d, 0x0d, 0x23, 0x13, 0xaa, 0x87, 0x7a, 0xfa, 0x0a, 0xaa, 0x9e, 0x88,
	0x25, 0x8b, 0xd2, 0x96, 0x6c, 0x7d, 0xb0, 0x25, 0x53, 0x13, 0x95, 0xad, 0x86, 0x70, 0x0b, 0x77,
	0xf5, 0x39, 0x6c, 0x04, 0x3a, 0x4a, 0xfa, 0x02, 0x40, 0xeb, 0x3e, 0xc1, 0xad, 0x6c, 0x00, 0x94,
	0x97, 0x6f, 0xdb, 0xbc, 0x09, 0x70, 0x12, 0x0c, 0x93, 0x36, 0x54, 0x01, 0xeb, 0x97, 0x76, 0x89,
	0x54, 0xc1, 0x7e, 0xbb, 0xdd, 0xb6, 0x36, 0x5d, 0x70, 0x70, 0xfe, 0xa3, 0x7c, 0xfc, 0xba, 0x5d,
	0x22, 0x00, 0xd5, 0x7d, 0x3f, 0x1c, 0xb1, 0xa0, 0x6d, 0x6d, 0x7e, 0x9b, 0xb8, 0xa0, 0xfa, 0xd3,
	0x1a, 0x38, 0x47, 0x82, 0xb3, 0x76, 0x09, 0x57, 0x4f, 0x85, 0x3c, 0x6f, 0x5b, 0xa4, 0x0e, 0x95,
	0xa7, 0x23, 0xd1, 0x1f, 0xb6, 0x6d, 0xbd, 0xf4, 0xfb, 0xc3, 0x76, 0xb9, 0xbb, 0x07, 0x4d, 0x35,
	0xdf, 0x4f, 0xf4, 0xb7, 0x0b, 0xf9, 0x06, 0x5a, 0xcf, 0x99, 0xcc, 0x4f, 0xf5, 0x76, 0x6e, 0x8e,
	0x2b, 0xa8, 0x7b, 0x2d, 0xa7, 0x41, 0x08, 0x2d, 0x75, 0x7f, 0xb3, 0xf5, 0x28, 0x4e, 0xcc, 0x3c,
	0x84, 0xea, 0x49, 0x38, 0xe0, 0xa7, 0x13, 0x72, 0x2d, 0x89, 0xd0, 0x4c, 0x69, 0x17, 0x14, 0x85,
	0xea, 0x0b, 0x87, 0x96, 0xc8, 0x17, 0x1a, 0xf8, 0x92, 0x2f, 0x03, 0x9b, 0xf9, 0x91, 0x4a, 0x4b,
	0xe4, 0x11, 0xb4, 0x3c, 0x36, 0x08, 0x31, 0x48, 0x3d, 0x40, 0x48, 0xab, 0x38, 0x4c, 0x5c, 0x95,
	0x65, 0xd3, 0x36, 0x69, 0x89, 0xdc, 0x87, 0xda, 0x73, 0xa6, 0x27, 0x51, 0xca, 0xf3, 0x92, 0xd5,
	0x4d, 0x80, 0xd3, 0x49, 0xe0, 0x4b, 0xa6, 0x70, 0x85, 0xdd, 0x25, 0xec, 0x03, 0xa8, 0x1e, 0x88,
	0x81, 0x98, 0xca, 0x05, 0x5c, 0x21, 0xa4, 0xee, 0x5f, 0x16, 0xb4, 0x4c, 0x07, 0x4a, 0xe8, 0xf8,
	0x1a, 0x9a, 0xc7, 0x3c, 0xd7, 0x98, 0x94, 0xe3, 0x99, 0xec, 0x2e, 0xc8, 0xb4, 0xb4, 0x61, 0x7d,
	0x69, 0x91, 0xc7, 0xb0, 0x7e, 0xcc, 0xf3, 0xbd, 0xfc, 0xda, 0x42, 0xe3, 0x76, 0x17, 0x15, 0xe6,
	0xe0, 0x36, 0x34, 0x8e, 0x79, 0xd6, 0xac, 0xd6, 0x11, 0x95, 0x8a, 0x6e, 0x51, 0xd4, 0x47, 0xba,
	0x7f, 0xdb, 0x00, 0x87, 0xa7, 0xbd, 0xc4, 0xe1, 0xbb, 0xe0, 0xa8, 0xe4, 0xa7, 0xd5, 0xeb, 0x26,
	0x2f, 0x48, 0x27, 0x1c, 0xa9, 0xe8, 0x45, 0xcc, 0x97, 0x8c, 0xe4, 0x9f, 0x96, 0x9b, 0x17, 0x14,
	0xaa, 0xf6, 0x8c, 0xc5, 0x32, 0x12, 0xf3, 0x22, 0xac, 0x58, 0x03, 0x1b, 0x85, 0x14, 0xac, 0xb2,
	0xf7, 0x19, 0x38, 0xaf, 0x44, 0xc8, 0x57, 0x19, 0xbb, 0x0f, 0x95, 0x03, 0xe6, 0xcf, 0xd8, 0xaa,
	0x14, 0x91, 0x87, 0x50, 0xdf, 0x0d, 0x82, 0x43, 0x86, 0x83, 0x7a, 0x25, 0x70, 0x13, 0x9a, 0x1e,
	0x1b, 0x8b, 0x19, 0xfb, 0x38, 0xb6, 0xfb, 0xbb, 0x0d, 0xeb, 0xfa, 0x0d, 0x26, 0x2c, 0xd2, 0x25,
	0x16, 0x73, 0xfd, 0xc3, 0x10, 0x79, 0x1b, 0xca, 0xbb, 0x41, 0x90, 0x2b, 0xd0, 0xa2, 0x03, 0xf7,
	0xf0, 0x6f, 0x00, 0x1d, 0xb8, 0x14, 0x41, 0x61, 0x6d, 0x37, 0x08, 0xd4, 0xd3, 0xbe, 0x14, 0xf3,
	0x39, 0x34, 0xb4, 0x95, 0xd5, 0xb0, 0xc4, 0x94, 0xff, 0x69, 0xa6, 0x56, 0xc0, 0xce, 0xaa, 0xea,
	0x27, 0xe8, 0xab, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x43, 0x5c, 0x7b, 0x18, 0x0d, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	GetFeatureList(ctx context.Context, in *FeatureQuery, opts ...grpc.CallOption) (*FeatureList, error)
}

type queryServiceClient struct {
	cc *grpc.ClientConn
}

func NewQueryServiceClient(cc *grpc.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) GetFeatureList(ctx context.Context, in *FeatureQuery, opts ...grpc.CallOption) (*FeatureList, error) {
	out := new(FeatureList)
	err := c.cc.Invoke(ctx, "/v1.QueryService/GetFeatureList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	GetFeatureList(context.Context, *FeatureQuery) (*FeatureList, error)
}

func RegisterQueryServiceServer(s *grpc.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_GetFeatureList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetFeatureList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.QueryService/GetFeatureList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetFeatureList(ctx, req.(*FeatureQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeatureList",
			Handler:    _QueryService_GetFeatureList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/service.proto",
}

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	SignUp(ctx context.Context, in *UserAccount, opts ...grpc.CallOption) (*Result, error)
	SignIn(ctx context.Context, in *UserAccount, opts ...grpc.CallOption) (*UserInfo, error)
	RegisterClient(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*Session, error)
	GetInfo(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserInfo, error)
	UpdateInfo(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UserInfo, error)
	Logout(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Result, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) SignUp(ctx context.Context, in *UserAccount, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/v1.UserService/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SignIn(ctx context.Context, in *UserAccount, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/v1.UserService/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RegisterClient(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/v1.UserService/RegisterClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetInfo(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/v1.UserService/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateInfo(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/v1.UserService/UpdateInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Logout(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/v1.UserService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	SignUp(context.Context, *UserAccount) (*Result, error)
	SignIn(context.Context, *UserAccount) (*UserInfo, error)
	RegisterClient(context.Context, *ClientInfo) (*Session, error)
	GetInfo(context.Context, *User) (*UserInfo, error)
	UpdateInfo(context.Context, *UserInfo) (*UserInfo, error)
	Logout(context.Context, *UserInfo) (*Result, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserService/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SignUp(ctx, req.(*UserAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserService/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SignIn(ctx, req.(*UserAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RegisterClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RegisterClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserService/RegisterClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RegisterClient(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserService/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetInfo(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserService/UpdateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateInfo(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Logout(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _UserService_SignUp_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _UserService_SignIn_Handler,
		},
		{
			MethodName: "RegisterClient",
			Handler:    _UserService_RegisterClient_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _UserService_GetInfo_Handler,
		},
		{
			MethodName: "UpdateInfo",
			Handler:    _UserService_UpdateInfo_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _UserService_Logout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/service.proto",
}

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessageServiceClient interface {
	OnAckMessage(ctx context.Context, opts ...grpc.CallOption) (MessageService_OnAckMessageClient, error)
	OnChatMessage(ctx context.Context, opts ...grpc.CallOption) (MessageService_OnChatMessageClient, error)
	OnHeartbeat(ctx context.Context, opts ...grpc.CallOption) (MessageService_OnHeartbeatClient, error)
}

type messageServiceClient struct {
	cc *grpc.ClientConn
}

func NewMessageServiceClient(cc *grpc.ClientConn) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) OnAckMessage(ctx context.Context, opts ...grpc.CallOption) (MessageService_OnAckMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageService_serviceDesc.Streams[0], "/v1.MessageService/OnAckMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceOnAckMessageClient{stream}
	return x, nil
}

type MessageService_OnAckMessageClient interface {
	Send(*AckMessage) error
	Recv() (*AckMessage, error)
	grpc.ClientStream
}

type messageServiceOnAckMessageClient struct {
	grpc.ClientStream
}

func (x *messageServiceOnAckMessageClient) Send(m *AckMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageServiceOnAckMessageClient) Recv() (*AckMessage, error) {
	m := new(AckMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageServiceClient) OnChatMessage(ctx context.Context, opts ...grpc.CallOption) (MessageService_OnChatMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageService_serviceDesc.Streams[1], "/v1.MessageService/OnChatMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceOnChatMessageClient{stream}
	return x, nil
}

type MessageService_OnChatMessageClient interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type messageServiceOnChatMessageClient struct {
	grpc.ClientStream
}

func (x *messageServiceOnChatMessageClient) Send(m *ChatMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageServiceOnChatMessageClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageServiceClient) OnHeartbeat(ctx context.Context, opts ...grpc.CallOption) (MessageService_OnHeartbeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageService_serviceDesc.Streams[2], "/v1.MessageService/OnHeartbeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceOnHeartbeatClient{stream}
	return x, nil
}

type MessageService_OnHeartbeatClient interface {
	Send(*Heartbeat) error
	Recv() (*Heartbeat, error)
	grpc.ClientStream
}

type messageServiceOnHeartbeatClient struct {
	grpc.ClientStream
}

func (x *messageServiceOnHeartbeatClient) Send(m *Heartbeat) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageServiceOnHeartbeatClient) Recv() (*Heartbeat, error) {
	m := new(Heartbeat)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageServiceServer is the server API for MessageService service.
type MessageServiceServer interface {
	OnAckMessage(MessageService_OnAckMessageServer) error
	OnChatMessage(MessageService_OnChatMessageServer) error
	OnHeartbeat(MessageService_OnHeartbeatServer) error
}

func RegisterMessageServiceServer(s *grpc.Server, srv MessageServiceServer) {
	s.RegisterService(&_MessageService_serviceDesc, srv)
}

func _MessageService_OnAckMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageServiceServer).OnAckMessage(&messageServiceOnAckMessageServer{stream})
}

type MessageService_OnAckMessageServer interface {
	Send(*AckMessage) error
	Recv() (*AckMessage, error)
	grpc.ServerStream
}

type messageServiceOnAckMessageServer struct {
	grpc.ServerStream
}

func (x *messageServiceOnAckMessageServer) Send(m *AckMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageServiceOnAckMessageServer) Recv() (*AckMessage, error) {
	m := new(AckMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageService_OnChatMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageServiceServer).OnChatMessage(&messageServiceOnChatMessageServer{stream})
}

type MessageService_OnChatMessageServer interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ServerStream
}

type messageServiceOnChatMessageServer struct {
	grpc.ServerStream
}

func (x *messageServiceOnChatMessageServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageServiceOnChatMessageServer) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageService_OnHeartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageServiceServer).OnHeartbeat(&messageServiceOnHeartbeatServer{stream})
}

type MessageService_OnHeartbeatServer interface {
	Send(*Heartbeat) error
	Recv() (*Heartbeat, error)
	grpc.ServerStream
}

type messageServiceOnHeartbeatServer struct {
	grpc.ServerStream
}

func (x *messageServiceOnHeartbeatServer) Send(m *Heartbeat) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageServiceOnHeartbeatServer) Recv() (*Heartbeat, error) {
	m := new(Heartbeat)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MessageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OnAckMessage",
			Handler:       _MessageService_OnAckMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "OnChatMessage",
			Handler:       _MessageService_OnChatMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "OnHeartbeat",
			Handler:       _MessageService_OnHeartbeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "v1/service.proto",
}

// MUCServiceClient is the client API for MUCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MUCServiceClient interface {
	List(ctx context.Context, in *Page, opts ...grpc.CallOption) (*MUCList, error)
	Create(ctx context.Context, in *MUCInfo, opts ...grpc.CallOption) (*MUCInfo, error)
	Destroy(ctx context.Context, in *MUCInfo, opts ...grpc.CallOption) (*Result, error)
	UpdateInfo(ctx context.Context, in *MUCInfo, opts ...grpc.CallOption) (*MUCInfo, error)
	Join(ctx context.Context, in *MUCInfo, opts ...grpc.CallOption) (*Result, error)
	Leave(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Result, error)
	AddMember(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Result, error)
	RemoveMember(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Result, error)
}

type mUCServiceClient struct {
	cc *grpc.ClientConn
}

func NewMUCServiceClient(cc *grpc.ClientConn) MUCServiceClient {
	return &mUCServiceClient{cc}
}

func (c *mUCServiceClient) List(ctx context.Context, in *Page, opts ...grpc.CallOption) (*MUCList, error) {
	out := new(MUCList)
	err := c.cc.Invoke(ctx, "/v1.MUCService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mUCServiceClient) Create(ctx context.Context, in *MUCInfo, opts ...grpc.CallOption) (*MUCInfo, error) {
	out := new(MUCInfo)
	err := c.cc.Invoke(ctx, "/v1.MUCService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mUCServiceClient) Destroy(ctx context.Context, in *MUCInfo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/v1.MUCService/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mUCServiceClient) UpdateInfo(ctx context.Context, in *MUCInfo, opts ...grpc.CallOption) (*MUCInfo, error) {
	out := new(MUCInfo)
	err := c.cc.Invoke(ctx, "/v1.MUCService/UpdateInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mUCServiceClient) Join(ctx context.Context, in *MUCInfo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/v1.MUCService/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mUCServiceClient) Leave(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/v1.MUCService/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mUCServiceClient) AddMember(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/v1.MUCService/AddMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mUCServiceClient) RemoveMember(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/v1.MUCService/RemoveMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MUCServiceServer is the server API for MUCService service.
type MUCServiceServer interface {
	List(context.Context, *Page) (*MUCList, error)
	Create(context.Context, *MUCInfo) (*MUCInfo, error)
	Destroy(context.Context, *MUCInfo) (*Result, error)
	UpdateInfo(context.Context, *MUCInfo) (*MUCInfo, error)
	Join(context.Context, *MUCInfo) (*Result, error)
	Leave(context.Context, *UserInfo) (*Result, error)
	AddMember(context.Context, *UserInfo) (*Result, error)
	RemoveMember(context.Context, *UserInfo) (*Result, error)
}

func RegisterMUCServiceServer(s *grpc.Server, srv MUCServiceServer) {
	s.RegisterService(&_MUCService_serviceDesc, srv)
}

func _MUCService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MUCServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.MUCService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MUCServiceServer).List(ctx, req.(*Page))
	}
	return interceptor(ctx, in, info, handler)
}

func _MUCService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MUCInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MUCServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.MUCService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MUCServiceServer).Create(ctx, req.(*MUCInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MUCService_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MUCInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MUCServiceServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.MUCService/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MUCServiceServer).Destroy(ctx, req.(*MUCInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MUCService_UpdateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MUCInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MUCServiceServer).UpdateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.MUCService/UpdateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MUCServiceServer).UpdateInfo(ctx, req.(*MUCInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MUCService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MUCInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MUCServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.MUCService/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MUCServiceServer).Join(ctx, req.(*MUCInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MUCService_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MUCServiceServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.MUCService/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MUCServiceServer).Leave(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MUCService_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MUCServiceServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.MUCService/AddMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MUCServiceServer).AddMember(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MUCService_RemoveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MUCServiceServer).RemoveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.MUCService/RemoveMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MUCServiceServer).RemoveMember(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _MUCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.MUCService",
	HandlerType: (*MUCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _MUCService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _MUCService_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _MUCService_Destroy_Handler,
		},
		{
			MethodName: "UpdateInfo",
			Handler:    _MUCService_UpdateInfo_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _MUCService_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _MUCService_Leave_Handler,
		},
		{
			MethodName: "AddMember",
			Handler:    _MUCService_AddMember_Handler,
		},
		{
			MethodName: "RemoveMember",
			Handler:    _MUCService_RemoveMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/service.proto",
}

// RosterServiceClient is the client API for RosterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RosterServiceClient interface {
	List(ctx context.Context, in *Page, opts ...grpc.CallOption) (*RosterList, error)
	Add(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error)
	Remove(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error)
	AddBlock(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error)
	RemoveBlock(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error)
	AddBlack(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error)
	RemoveBlack(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error)
}

type rosterServiceClient struct {
	cc *grpc.ClientConn
}

func NewRosterServiceClient(cc *grpc.ClientConn) RosterServiceClient {
	return &rosterServiceClient{cc}
}

func (c *rosterServiceClient) List(ctx context.Context, in *Page, opts ...grpc.CallOption) (*RosterList, error) {
	out := new(RosterList)
	err := c.cc.Invoke(ctx, "/v1.RosterService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosterServiceClient) Add(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/v1.RosterService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosterServiceClient) Remove(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/v1.RosterService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosterServiceClient) AddBlock(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/v1.RosterService/AddBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosterServiceClient) RemoveBlock(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/v1.RosterService/RemoveBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosterServiceClient) AddBlack(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/v1.RosterService/AddBlack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosterServiceClient) RemoveBlack(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/v1.RosterService/RemoveBlack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RosterServiceServer is the server API for RosterService service.
type RosterServiceServer interface {
	List(context.Context, *Page) (*RosterList, error)
	Add(context.Context, *User) (*Result, error)
	Remove(context.Context, *User) (*Result, error)
	AddBlock(context.Context, *User) (*Result, error)
	RemoveBlock(context.Context, *User) (*Result, error)
	AddBlack(context.Context, *User) (*Result, error)
	RemoveBlack(context.Context, *User) (*Result, error)
}

func RegisterRosterServiceServer(s *grpc.Server, srv RosterServiceServer) {
	s.RegisterService(&_RosterService_serviceDesc, srv)
}

func _RosterService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosterServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RosterService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosterServiceServer).List(ctx, req.(*Page))
	}
	return interceptor(ctx, in, info, handler)
}

func _RosterService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosterServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RosterService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosterServiceServer).Add(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _RosterService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosterServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RosterService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosterServiceServer).Remove(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _RosterService_AddBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosterServiceServer).AddBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RosterService/AddBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosterServiceServer).AddBlock(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _RosterService_RemoveBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosterServiceServer).RemoveBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RosterService/RemoveBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosterServiceServer).RemoveBlock(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _RosterService_AddBlack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosterServiceServer).AddBlack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RosterService/AddBlack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosterServiceServer).AddBlack(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _RosterService_RemoveBlack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosterServiceServer).RemoveBlack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RosterService/RemoveBlack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosterServiceServer).RemoveBlack(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

var _RosterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.RosterService",
	HandlerType: (*RosterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _RosterService_List_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _RosterService_Add_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _RosterService_Remove_Handler,
		},
		{
			MethodName: "AddBlock",
			Handler:    _RosterService_AddBlock_Handler,
		},
		{
			MethodName: "RemoveBlock",
			Handler:    _RosterService_RemoveBlock_Handler,
		},
		{
			MethodName: "AddBlack",
			Handler:    _RosterService_AddBlack_Handler,
		},
		{
			MethodName: "RemoveBlack",
			Handler:    _RosterService_RemoveBlack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/service.proto",
}
