// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1/service.proto

/*
Package v1 is a generated protocol buffer package.

It is generated from these files:
	v1/service.proto

It has these top-level messages:
	Page
	Result
	Feature
	FeatureQuery
	FeatureList
	User
	UserAccount
	UserInfo
	ClientInfo
	Session
	ChatMessage
	AckMessage
	Heartbeat
	MUCInfo
	MUCList
	Roster
	RosterList
*/
package v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SdkVersion int32

const (
	SdkVersion__  SdkVersion = 0
	SdkVersion_V1 SdkVersion = 1
)

var SdkVersion_name = map[int32]string{
	0: "_",
	1: "V1",
}
var SdkVersion_value = map[string]int32{
	"_":  0,
	"V1": 1,
}

func (x SdkVersion) String() string {
	return proto.EnumName(SdkVersion_name, int32(x))
}
func (SdkVersion) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Code int32

const (
	Code_OK     Code = 0
	Code_Failed Code = 1
)

var Code_name = map[int32]string{
	0: "OK",
	1: "Failed",
}
var Code_value = map[string]int32{
	"OK":     0,
	"Failed": 1,
}

func (x Code) String() string {
	return proto.EnumName(Code_name, int32(x))
}
func (Code) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type FeatureType int32

const (
	FeatureType_FeatureTypeALL     FeatureType = 0
	FeatureType_FeatureTypeQuery   FeatureType = 1
	FeatureType_FeatureTypeUser    FeatureType = 2
	FeatureType_FeatureTypeRoster  FeatureType = 3
	FeatureType_FeatureTypeMessage FeatureType = 4
	FeatureType_FeatureTypeMUC     FeatureType = 5
)

var FeatureType_name = map[int32]string{
	0: "FeatureTypeALL",
	1: "FeatureTypeQuery",
	2: "FeatureTypeUser",
	3: "FeatureTypeRoster",
	4: "FeatureTypeMessage",
	5: "FeatureTypeMUC",
}
var FeatureType_value = map[string]int32{
	"FeatureTypeALL":     0,
	"FeatureTypeQuery":   1,
	"FeatureTypeUser":    2,
	"FeatureTypeRoster":  3,
	"FeatureTypeMessage": 4,
	"FeatureTypeMUC":     5,
}

func (x FeatureType) String() string {
	return proto.EnumName(FeatureType_name, int32(x))
}
func (FeatureType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type RosterType int32

const (
	RosterType_None  RosterType = 0
	RosterType_Both  RosterType = 1
	RosterType_Block RosterType = 2
	RosterType_Black RosterType = 3
)

var RosterType_name = map[int32]string{
	0: "None",
	1: "Both",
	2: "Block",
	3: "Black",
}
var RosterType_value = map[string]int32{
	"None":  0,
	"Both":  1,
	"Block": 2,
	"Black": 3,
}

func (x RosterType) String() string {
	return proto.EnumName(RosterType_name, int32(x))
}
func (RosterType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Page struct {
	Size   int32 `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
	Number int32 `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
}

func (m *Page) Reset()                    { *m = Page{} }
func (m *Page) String() string            { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()               {}
func (*Page) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Page) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Page) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type Result struct {
	Code Code   `protobuf:"varint,1,opt,name=code,enum=v1.Code" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Result) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_OK
}

func (m *Result) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type Feature struct {
	Type    FeatureType `protobuf:"varint,1,opt,name=type,enum=v1.FeatureType" json:"type,omitempty"`
	Name    string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Version int32       `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	Desc    string      `protobuf:"bytes,4,opt,name=desc" json:"desc,omitempty"`
}

func (m *Feature) Reset()                    { *m = Feature{} }
func (m *Feature) String() string            { return proto.CompactTextString(m) }
func (*Feature) ProtoMessage()               {}
func (*Feature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Feature) GetType() FeatureType {
	if m != nil {
		return m.Type
	}
	return FeatureType_FeatureTypeALL
}

func (m *Feature) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Feature) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Feature) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type FeatureQuery struct {
	Type FeatureType `protobuf:"varint,1,opt,name=type,enum=v1.FeatureType" json:"type,omitempty"`
}

func (m *FeatureQuery) Reset()                    { *m = FeatureQuery{} }
func (m *FeatureQuery) String() string            { return proto.CompactTextString(m) }
func (*FeatureQuery) ProtoMessage()               {}
func (*FeatureQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FeatureQuery) GetType() FeatureType {
	if m != nil {
		return m.Type
	}
	return FeatureType_FeatureTypeALL
}

type FeatureList struct {
	List []*Feature `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *FeatureList) Reset()                    { *m = FeatureList{} }
func (m *FeatureList) String() string            { return proto.CompactTextString(m) }
func (*FeatureList) ProtoMessage()               {}
func (*FeatureList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FeatureList) GetList() []*Feature {
	if m != nil {
		return m.List
	}
	return nil
}

type User struct {
	Domain   string `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	NickName string `protobuf:"bytes,4,opt,name=nickName" json:"nickName,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *User) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

type UserAccount struct {
	Domain string `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Passwd string `protobuf:"bytes,3,opt,name=passwd" json:"passwd,omitempty"`
}

func (m *UserAccount) Reset()                    { *m = UserAccount{} }
func (m *UserAccount) String() string            { return proto.CompactTextString(m) }
func (*UserAccount) ProtoMessage()               {}
func (*UserAccount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UserAccount) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *UserAccount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserAccount) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

type UserInfo struct {
	Extension    map[string]string `protobuf:"bytes,1,rep,name=extension" json:"extension,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	User         *User             `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Gender       string            `protobuf:"bytes,3,opt,name=gender" json:"gender,omitempty"`
	Country      string            `protobuf:"bytes,4,opt,name=country" json:"country,omitempty"`
	Organization string            `protobuf:"bytes,5,opt,name=organization" json:"organization,omitempty"`
	Email        string            `protobuf:"bytes,6,opt,name=email" json:"email,omitempty"`
	Phone        string            `protobuf:"bytes,7,opt,name=phone" json:"phone,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UserInfo) GetExtension() map[string]string {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *UserInfo) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserInfo) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *UserInfo) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *UserInfo) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *UserInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserInfo) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

type ClientInfo struct {
	Extension     map[string]string `protobuf:"bytes,1,rep,name=extension" json:"extension,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ClientType    string            `protobuf:"bytes,2,opt,name=clientType" json:"clientType,omitempty"`
	ClientVersion string            `protobuf:"bytes,3,opt,name=clientVersion" json:"clientVersion,omitempty"`
	OsType        string            `protobuf:"bytes,4,opt,name=osType" json:"osType,omitempty"`
	OsVersion     string            `protobuf:"bytes,5,opt,name=osVersion" json:"osVersion,omitempty"`
	DeviceType    string            `protobuf:"bytes,6,opt,name=deviceType" json:"deviceType,omitempty"`
	DeviceNumber  string            `protobuf:"bytes,7,opt,name=deviceNumber" json:"deviceNumber,omitempty"`
}

func (m *ClientInfo) Reset()                    { *m = ClientInfo{} }
func (m *ClientInfo) String() string            { return proto.CompactTextString(m) }
func (*ClientInfo) ProtoMessage()               {}
func (*ClientInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ClientInfo) GetExtension() map[string]string {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *ClientInfo) GetClientType() string {
	if m != nil {
		return m.ClientType
	}
	return ""
}

func (m *ClientInfo) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *ClientInfo) GetOsType() string {
	if m != nil {
		return m.OsType
	}
	return ""
}

func (m *ClientInfo) GetOsVersion() string {
	if m != nil {
		return m.OsVersion
	}
	return ""
}

func (m *ClientInfo) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *ClientInfo) GetDeviceNumber() string {
	if m != nil {
		return m.DeviceNumber
	}
	return ""
}

type Session struct {
	Sid       string `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
	LoginTime int64  `protobuf:"varint,2,opt,name=loginTime" json:"loginTime,omitempty"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Session) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *Session) GetLoginTime() int64 {
	if m != nil {
		return m.LoginTime
	}
	return 0
}

type ChatMessage struct {
	Extension map[string]string `protobuf:"bytes,1,rep,name=extension" json:"extension,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Id        int64             `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Type      int32             `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	Domain    string            `protobuf:"bytes,4,opt,name=domain" json:"domain,omitempty"`
	From      string            `protobuf:"bytes,5,opt,name=from" json:"from,omitempty"`
	To        string            `protobuf:"bytes,6,opt,name=to" json:"to,omitempty"`
	Msg       string            `protobuf:"bytes,7,opt,name=msg" json:"msg,omitempty"`
}

func (m *ChatMessage) Reset()                    { *m = ChatMessage{} }
func (m *ChatMessage) String() string            { return proto.CompactTextString(m) }
func (*ChatMessage) ProtoMessage()               {}
func (*ChatMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ChatMessage) GetExtension() map[string]string {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *ChatMessage) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChatMessage) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ChatMessage) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ChatMessage) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ChatMessage) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *ChatMessage) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type AckMessage struct {
	Domain string `protobuf:"bytes,4,opt,name=domain" json:"domain,omitempty"`
	From   string `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To     string `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	Id     int64  `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
}

func (m *AckMessage) Reset()                    { *m = AckMessage{} }
func (m *AckMessage) String() string            { return proto.CompactTextString(m) }
func (*AckMessage) ProtoMessage()               {}
func (*AckMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AckMessage) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *AckMessage) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *AckMessage) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *AckMessage) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Heartbeat struct {
	Domain       string `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	From         string `protobuf:"bytes,2,opt,name=from" json:"from,omitempty"`
	Index        int64  `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	ClientTime   int64  `protobuf:"varint,4,opt,name=clientTime" json:"clientTime,omitempty"`
	ServerTime   int64  `protobuf:"varint,5,opt,name=serverTime" json:"serverTime,omitempty"`
	NextDuration int64  `protobuf:"varint,6,opt,name=nextDuration" json:"nextDuration,omitempty"`
}

func (m *Heartbeat) Reset()                    { *m = Heartbeat{} }
func (m *Heartbeat) String() string            { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()               {}
func (*Heartbeat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Heartbeat) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Heartbeat) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Heartbeat) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Heartbeat) GetClientTime() int64 {
	if m != nil {
		return m.ClientTime
	}
	return 0
}

func (m *Heartbeat) GetServerTime() int64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (m *Heartbeat) GetNextDuration() int64 {
	if m != nil {
		return m.NextDuration
	}
	return 0
}

type MUCInfo struct {
	Extension map[string]string `protobuf:"bytes,1,rep,name=extension" json:"extension,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Domain    string            `protobuf:"bytes,2,opt,name=domain" json:"domain,omitempty"`
	Id        int64             `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Type      int32             `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
	Name      string            `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
}

func (m *MUCInfo) Reset()                    { *m = MUCInfo{} }
func (m *MUCInfo) String() string            { return proto.CompactTextString(m) }
func (*MUCInfo) ProtoMessage()               {}
func (*MUCInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *MUCInfo) GetExtension() map[string]string {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *MUCInfo) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *MUCInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MUCInfo) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *MUCInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type MUCList struct {
	Page *Page      `protobuf:"bytes,1,opt,name=page" json:"page,omitempty"`
	Muc  []*MUCInfo `protobuf:"bytes,2,rep,name=muc" json:"muc,omitempty"`
}

func (m *MUCList) Reset()                    { *m = MUCList{} }
func (m *MUCList) String() string            { return proto.CompactTextString(m) }
func (*MUCList) ProtoMessage()               {}
func (*MUCList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *MUCList) GetPage() *Page {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *MUCList) GetMuc() []*MUCInfo {
	if m != nil {
		return m.Muc
	}
	return nil
}

type Roster struct {
	User *User      `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Type RosterType `protobuf:"varint,2,opt,name=type,enum=v1.RosterType" json:"type,omitempty"`
}

func (m *Roster) Reset()                    { *m = Roster{} }
func (m *Roster) String() string            { return proto.CompactTextString(m) }
func (*Roster) ProtoMessage()               {}
func (*Roster) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Roster) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Roster) GetType() RosterType {
	if m != nil {
		return m.Type
	}
	return RosterType_None
}

type RosterList struct {
	Page *Page   `protobuf:"bytes,1,opt,name=page" json:"page,omitempty"`
	User []*User `protobuf:"bytes,2,rep,name=user" json:"user,omitempty"`
}

func (m *RosterList) Reset()                    { *m = RosterList{} }
func (m *RosterList) String() string            { return proto.CompactTextString(m) }
func (*RosterList) ProtoMessage()               {}
func (*RosterList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *RosterList) GetPage() *Page {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *RosterList) GetUser() []*User {
	if m != nil {
		return m.User
	}
	return nil
}

func init() {
	proto.RegisterType((*Page)(nil), "v1.Page")
	proto.RegisterType((*Result)(nil), "v1.Result")
	proto.RegisterType((*Feature)(nil), "v1.Feature")
	proto.RegisterType((*FeatureQuery)(nil), "v1.FeatureQuery")
	proto.RegisterType((*FeatureList)(nil), "v1.FeatureList")
	proto.RegisterType((*User)(nil), "v1.User")
	proto.RegisterType((*UserAccount)(nil), "v1.UserAccount")
	proto.RegisterType((*UserInfo)(nil), "v1.UserInfo")
	proto.RegisterType((*ClientInfo)(nil), "v1.ClientInfo")
	proto.RegisterType((*Session)(nil), "v1.Session")
	proto.RegisterType((*ChatMessage)(nil), "v1.ChatMessage")
	proto.RegisterType((*AckMessage)(nil), "v1.AckMessage")
	proto.RegisterType((*Heartbeat)(nil), "v1.Heartbeat")
	proto.RegisterType((*MUCInfo)(nil), "v1.MUCInfo")
	proto.RegisterType((*MUCList)(nil), "v1.MUCList")
	proto.RegisterType((*Roster)(nil), "v1.Roster")
	proto.RegisterType((*RosterList)(nil), "v1.RosterList")
	proto.RegisterEnum("v1.SdkVersion", SdkVersion_name, SdkVersion_value)
	proto.RegisterEnum("v1.Code", Code_name, Code_value)
	proto.RegisterEnum("v1.FeatureType", FeatureType_name, FeatureType_value)
	proto.RegisterEnum("v1.RosterType", RosterType_name, RosterType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for QueryService service

type QueryServiceClient interface {
	GetFeatureList(ctx context.Context, in *FeatureQuery, opts ...grpc.CallOption) (*FeatureList, error)
}

type queryServiceClient struct {
	cc *grpc.ClientConn
}

func NewQueryServiceClient(cc *grpc.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) GetFeatureList(ctx context.Context, in *FeatureQuery, opts ...grpc.CallOption) (*FeatureList, error) {
	out := new(FeatureList)
	err := grpc.Invoke(ctx, "/v1.QueryService/GetFeatureList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for QueryService service

type QueryServiceServer interface {
	GetFeatureList(context.Context, *FeatureQuery) (*FeatureList, error)
}

func RegisterQueryServiceServer(s *grpc.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_GetFeatureList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetFeatureList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.QueryService/GetFeatureList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetFeatureList(ctx, req.(*FeatureQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeatureList",
			Handler:    _QueryService_GetFeatureList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/service.proto",
}

// Client API for UserService service

type UserServiceClient interface {
	SignUp(ctx context.Context, in *UserAccount, opts ...grpc.CallOption) (*Result, error)
	SignIn(ctx context.Context, in *UserAccount, opts ...grpc.CallOption) (*Result, error)
	RegisterClient(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*Session, error)
	GetInfo(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserInfo, error)
	UpdateInfo(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UserInfo, error)
	Logout(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Result, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) SignUp(ctx context.Context, in *UserAccount, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/v1.UserService/SignUp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SignIn(ctx context.Context, in *UserAccount, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/v1.UserService/SignIn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RegisterClient(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := grpc.Invoke(ctx, "/v1.UserService/RegisterClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetInfo(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := grpc.Invoke(ctx, "/v1.UserService/GetInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateInfo(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := grpc.Invoke(ctx, "/v1.UserService/UpdateInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Logout(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/v1.UserService/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceServer interface {
	SignUp(context.Context, *UserAccount) (*Result, error)
	SignIn(context.Context, *UserAccount) (*Result, error)
	RegisterClient(context.Context, *ClientInfo) (*Session, error)
	GetInfo(context.Context, *User) (*UserInfo, error)
	UpdateInfo(context.Context, *UserInfo) (*UserInfo, error)
	Logout(context.Context, *UserInfo) (*Result, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserService/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SignUp(ctx, req.(*UserAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserService/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SignIn(ctx, req.(*UserAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RegisterClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RegisterClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserService/RegisterClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RegisterClient(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserService/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetInfo(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserService/UpdateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateInfo(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Logout(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _UserService_SignUp_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _UserService_SignIn_Handler,
		},
		{
			MethodName: "RegisterClient",
			Handler:    _UserService_RegisterClient_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _UserService_GetInfo_Handler,
		},
		{
			MethodName: "UpdateInfo",
			Handler:    _UserService_UpdateInfo_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _UserService_Logout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/service.proto",
}

// Client API for MessageService service

type MessageServiceClient interface {
	OnAckMessage(ctx context.Context, opts ...grpc.CallOption) (MessageService_OnAckMessageClient, error)
	OnChatMessage(ctx context.Context, opts ...grpc.CallOption) (MessageService_OnChatMessageClient, error)
	OnHeartbeat(ctx context.Context, opts ...grpc.CallOption) (MessageService_OnHeartbeatClient, error)
}

type messageServiceClient struct {
	cc *grpc.ClientConn
}

func NewMessageServiceClient(cc *grpc.ClientConn) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) OnAckMessage(ctx context.Context, opts ...grpc.CallOption) (MessageService_OnAckMessageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MessageService_serviceDesc.Streams[0], c.cc, "/v1.MessageService/OnAckMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceOnAckMessageClient{stream}
	return x, nil
}

type MessageService_OnAckMessageClient interface {
	Send(*AckMessage) error
	Recv() (*AckMessage, error)
	grpc.ClientStream
}

type messageServiceOnAckMessageClient struct {
	grpc.ClientStream
}

func (x *messageServiceOnAckMessageClient) Send(m *AckMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageServiceOnAckMessageClient) Recv() (*AckMessage, error) {
	m := new(AckMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageServiceClient) OnChatMessage(ctx context.Context, opts ...grpc.CallOption) (MessageService_OnChatMessageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MessageService_serviceDesc.Streams[1], c.cc, "/v1.MessageService/OnChatMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceOnChatMessageClient{stream}
	return x, nil
}

type MessageService_OnChatMessageClient interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type messageServiceOnChatMessageClient struct {
	grpc.ClientStream
}

func (x *messageServiceOnChatMessageClient) Send(m *ChatMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageServiceOnChatMessageClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageServiceClient) OnHeartbeat(ctx context.Context, opts ...grpc.CallOption) (MessageService_OnHeartbeatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MessageService_serviceDesc.Streams[2], c.cc, "/v1.MessageService/OnHeartbeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceOnHeartbeatClient{stream}
	return x, nil
}

type MessageService_OnHeartbeatClient interface {
	Send(*Heartbeat) error
	Recv() (*Heartbeat, error)
	grpc.ClientStream
}

type messageServiceOnHeartbeatClient struct {
	grpc.ClientStream
}

func (x *messageServiceOnHeartbeatClient) Send(m *Heartbeat) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageServiceOnHeartbeatClient) Recv() (*Heartbeat, error) {
	m := new(Heartbeat)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MessageService service

type MessageServiceServer interface {
	OnAckMessage(MessageService_OnAckMessageServer) error
	OnChatMessage(MessageService_OnChatMessageServer) error
	OnHeartbeat(MessageService_OnHeartbeatServer) error
}

func RegisterMessageServiceServer(s *grpc.Server, srv MessageServiceServer) {
	s.RegisterService(&_MessageService_serviceDesc, srv)
}

func _MessageService_OnAckMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageServiceServer).OnAckMessage(&messageServiceOnAckMessageServer{stream})
}

type MessageService_OnAckMessageServer interface {
	Send(*AckMessage) error
	Recv() (*AckMessage, error)
	grpc.ServerStream
}

type messageServiceOnAckMessageServer struct {
	grpc.ServerStream
}

func (x *messageServiceOnAckMessageServer) Send(m *AckMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageServiceOnAckMessageServer) Recv() (*AckMessage, error) {
	m := new(AckMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageService_OnChatMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageServiceServer).OnChatMessage(&messageServiceOnChatMessageServer{stream})
}

type MessageService_OnChatMessageServer interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ServerStream
}

type messageServiceOnChatMessageServer struct {
	grpc.ServerStream
}

func (x *messageServiceOnChatMessageServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageServiceOnChatMessageServer) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageService_OnHeartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageServiceServer).OnHeartbeat(&messageServiceOnHeartbeatServer{stream})
}

type MessageService_OnHeartbeatServer interface {
	Send(*Heartbeat) error
	Recv() (*Heartbeat, error)
	grpc.ServerStream
}

type messageServiceOnHeartbeatServer struct {
	grpc.ServerStream
}

func (x *messageServiceOnHeartbeatServer) Send(m *Heartbeat) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageServiceOnHeartbeatServer) Recv() (*Heartbeat, error) {
	m := new(Heartbeat)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MessageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OnAckMessage",
			Handler:       _MessageService_OnAckMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "OnChatMessage",
			Handler:       _MessageService_OnChatMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "OnHeartbeat",
			Handler:       _MessageService_OnHeartbeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "v1/service.proto",
}

// Client API for MUCService service

type MUCServiceClient interface {
	List(ctx context.Context, in *Page, opts ...grpc.CallOption) (*MUCList, error)
	Create(ctx context.Context, in *MUCInfo, opts ...grpc.CallOption) (*MUCInfo, error)
	Destroy(ctx context.Context, in *MUCInfo, opts ...grpc.CallOption) (*Result, error)
	UpdateInfo(ctx context.Context, in *MUCInfo, opts ...grpc.CallOption) (*MUCInfo, error)
	Join(ctx context.Context, in *MUCInfo, opts ...grpc.CallOption) (*Result, error)
	Leave(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Result, error)
	AddMember(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Result, error)
	RemoveMember(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Result, error)
}

type mUCServiceClient struct {
	cc *grpc.ClientConn
}

func NewMUCServiceClient(cc *grpc.ClientConn) MUCServiceClient {
	return &mUCServiceClient{cc}
}

func (c *mUCServiceClient) List(ctx context.Context, in *Page, opts ...grpc.CallOption) (*MUCList, error) {
	out := new(MUCList)
	err := grpc.Invoke(ctx, "/v1.MUCService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mUCServiceClient) Create(ctx context.Context, in *MUCInfo, opts ...grpc.CallOption) (*MUCInfo, error) {
	out := new(MUCInfo)
	err := grpc.Invoke(ctx, "/v1.MUCService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mUCServiceClient) Destroy(ctx context.Context, in *MUCInfo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/v1.MUCService/Destroy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mUCServiceClient) UpdateInfo(ctx context.Context, in *MUCInfo, opts ...grpc.CallOption) (*MUCInfo, error) {
	out := new(MUCInfo)
	err := grpc.Invoke(ctx, "/v1.MUCService/UpdateInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mUCServiceClient) Join(ctx context.Context, in *MUCInfo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/v1.MUCService/Join", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mUCServiceClient) Leave(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/v1.MUCService/Leave", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mUCServiceClient) AddMember(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/v1.MUCService/AddMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mUCServiceClient) RemoveMember(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/v1.MUCService/RemoveMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MUCService service

type MUCServiceServer interface {
	List(context.Context, *Page) (*MUCList, error)
	Create(context.Context, *MUCInfo) (*MUCInfo, error)
	Destroy(context.Context, *MUCInfo) (*Result, error)
	UpdateInfo(context.Context, *MUCInfo) (*MUCInfo, error)
	Join(context.Context, *MUCInfo) (*Result, error)
	Leave(context.Context, *UserInfo) (*Result, error)
	AddMember(context.Context, *UserInfo) (*Result, error)
	RemoveMember(context.Context, *UserInfo) (*Result, error)
}

func RegisterMUCServiceServer(s *grpc.Server, srv MUCServiceServer) {
	s.RegisterService(&_MUCService_serviceDesc, srv)
}

func _MUCService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MUCServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.MUCService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MUCServiceServer).List(ctx, req.(*Page))
	}
	return interceptor(ctx, in, info, handler)
}

func _MUCService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MUCInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MUCServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.MUCService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MUCServiceServer).Create(ctx, req.(*MUCInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MUCService_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MUCInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MUCServiceServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.MUCService/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MUCServiceServer).Destroy(ctx, req.(*MUCInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MUCService_UpdateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MUCInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MUCServiceServer).UpdateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.MUCService/UpdateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MUCServiceServer).UpdateInfo(ctx, req.(*MUCInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MUCService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MUCInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MUCServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.MUCService/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MUCServiceServer).Join(ctx, req.(*MUCInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MUCService_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MUCServiceServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.MUCService/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MUCServiceServer).Leave(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MUCService_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MUCServiceServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.MUCService/AddMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MUCServiceServer).AddMember(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MUCService_RemoveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MUCServiceServer).RemoveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.MUCService/RemoveMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MUCServiceServer).RemoveMember(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _MUCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.MUCService",
	HandlerType: (*MUCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _MUCService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _MUCService_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _MUCService_Destroy_Handler,
		},
		{
			MethodName: "UpdateInfo",
			Handler:    _MUCService_UpdateInfo_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _MUCService_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _MUCService_Leave_Handler,
		},
		{
			MethodName: "AddMember",
			Handler:    _MUCService_AddMember_Handler,
		},
		{
			MethodName: "RemoveMember",
			Handler:    _MUCService_RemoveMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/service.proto",
}

// Client API for RosterService service

type RosterServiceClient interface {
	List(ctx context.Context, in *Page, opts ...grpc.CallOption) (*RosterList, error)
	Add(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error)
	Remove(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error)
	AddBlock(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error)
	RemoveBlock(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error)
	AddBlack(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error)
	RemoveBlack(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error)
}

type rosterServiceClient struct {
	cc *grpc.ClientConn
}

func NewRosterServiceClient(cc *grpc.ClientConn) RosterServiceClient {
	return &rosterServiceClient{cc}
}

func (c *rosterServiceClient) List(ctx context.Context, in *Page, opts ...grpc.CallOption) (*RosterList, error) {
	out := new(RosterList)
	err := grpc.Invoke(ctx, "/v1.RosterService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosterServiceClient) Add(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/v1.RosterService/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosterServiceClient) Remove(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/v1.RosterService/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosterServiceClient) AddBlock(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/v1.RosterService/AddBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosterServiceClient) RemoveBlock(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/v1.RosterService/RemoveBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosterServiceClient) AddBlack(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/v1.RosterService/AddBlack", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosterServiceClient) RemoveBlack(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/v1.RosterService/RemoveBlack", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RosterService service

type RosterServiceServer interface {
	List(context.Context, *Page) (*RosterList, error)
	Add(context.Context, *User) (*Result, error)
	Remove(context.Context, *User) (*Result, error)
	AddBlock(context.Context, *User) (*Result, error)
	RemoveBlock(context.Context, *User) (*Result, error)
	AddBlack(context.Context, *User) (*Result, error)
	RemoveBlack(context.Context, *User) (*Result, error)
}

func RegisterRosterServiceServer(s *grpc.Server, srv RosterServiceServer) {
	s.RegisterService(&_RosterService_serviceDesc, srv)
}

func _RosterService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosterServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RosterService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosterServiceServer).List(ctx, req.(*Page))
	}
	return interceptor(ctx, in, info, handler)
}

func _RosterService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosterServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RosterService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosterServiceServer).Add(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _RosterService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosterServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RosterService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosterServiceServer).Remove(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _RosterService_AddBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosterServiceServer).AddBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RosterService/AddBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosterServiceServer).AddBlock(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _RosterService_RemoveBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosterServiceServer).RemoveBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RosterService/RemoveBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosterServiceServer).RemoveBlock(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _RosterService_AddBlack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosterServiceServer).AddBlack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RosterService/AddBlack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosterServiceServer).AddBlack(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _RosterService_RemoveBlack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosterServiceServer).RemoveBlack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RosterService/RemoveBlack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosterServiceServer).RemoveBlack(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

var _RosterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.RosterService",
	HandlerType: (*RosterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _RosterService_List_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _RosterService_Add_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _RosterService_Remove_Handler,
		},
		{
			MethodName: "AddBlock",
			Handler:    _RosterService_AddBlock_Handler,
		},
		{
			MethodName: "RemoveBlock",
			Handler:    _RosterService_RemoveBlock_Handler,
		},
		{
			MethodName: "AddBlack",
			Handler:    _RosterService_AddBlack_Handler,
		},
		{
			MethodName: "RemoveBlack",
			Handler:    _RosterService_RemoveBlack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/service.proto",
}

func init() { proto.RegisterFile("v1/service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xc9, 0x72, 0xdb, 0x46,
	0x13, 0x26, 0x16, 0x92, 0x62, 0x93, 0xa2, 0xf0, 0xcf, 0xef, 0xb8, 0x58, 0xf0, 0x1a, 0xc8, 0x29,
	0xab, 0x78, 0x90, 0x23, 0x3a, 0x8b, 0x9c, 0xf8, 0x42, 0xd3, 0x92, 0x97, 0x68, 0x89, 0x21, 0xd1,
	0x95, 0x5b, 0x0a, 0x22, 0xc6, 0x14, 0x8a, 0x24, 0x86, 0x05, 0x80, 0x8c, 0xe8, 0x17, 0x48, 0x55,
	0x2e, 0x79, 0x88, 0x3c, 0x41, 0xf2, 0x04, 0xb9, 0xe5, 0x9c, 0xe7, 0xc9, 0x25, 0x35, 0x3d, 0x03,
	0x62, 0x40, 0xda, 0x94, 0x52, 0xba, 0xa1, 0x7b, 0xba, 0x7b, 0xba, 0xbf, 0xde, 0x06, 0x60, 0x4d,
	0x77, 0x1e, 0xc5, 0x34, 0x9a, 0x06, 0x3d, 0xba, 0x3d, 0x8e, 0x58, 0xc2, 0x88, 0x3e, 0xdd, 0x71,
	0x5a, 0x60, 0x7e, 0xef, 0xf5, 0x29, 0x21, 0x60, 0xc6, 0xc1, 0x7b, 0xda, 0xd0, 0xee, 0x6b, 0x5b,
	0x45, 0x17, 0xbf, 0xc9, 0x4d, 0x28, 0x85, 0x93, 0xd1, 0x19, 0x8d, 0x1a, 0x3a, 0x72, 0x25, 0xe5,
	0xec, 0x42, 0xc9, 0xa5, 0xf1, 0x64, 0x98, 0x90, 0xdb, 0x60, 0xf6, 0x98, 0x2f, 0xb4, 0xea, 0xad,
	0xb5, 0xed, 0xe9, 0xce, 0x76, 0x87, 0xf9, 0xd4, 0x45, 0x2e, 0xb1, 0xc0, 0x18, 0xc5, 0x7d, 0x54,
	0xae, 0xb8, 0xfc, 0xd3, 0x19, 0x43, 0x79, 0x9f, 0x7a, 0xc9, 0x24, 0xa2, 0x64, 0x13, 0xcc, 0x64,
	0x36, 0x4e, 0x55, 0x37, 0xb8, 0xaa, 0x3c, 0x3a, 0x9d, 0x8d, 0xa9, 0x8b, 0x87, 0xdc, 0xab, 0xd0,
	0x1b, 0x51, 0x69, 0x02, 0xbf, 0x49, 0x03, 0xca, 0x53, 0x1a, 0xc5, 0x01, 0x0b, 0x1b, 0x06, 0xba,
	0x95, 0x92, 0x5c, 0xda, 0xa7, 0x71, 0xaf, 0x61, 0x0a, 0x69, 0xfe, 0xed, 0x3c, 0x86, 0x9a, 0x34,
	0xfb, 0x66, 0x42, 0xa3, 0xd9, 0x95, 0xae, 0x75, 0xb6, 0xa1, 0x2a, 0x99, 0x07, 0x41, 0x9c, 0x90,
	0x7b, 0x60, 0x0e, 0x83, 0x38, 0x69, 0x68, 0xf7, 0x8d, 0xad, 0x6a, 0xab, 0xaa, 0xe8, 0xb8, 0x78,
	0xe0, 0x1c, 0x81, 0xd9, 0x8d, 0x69, 0xc4, 0x01, 0xf3, 0xd9, 0xc8, 0x0b, 0x42, 0x34, 0x5f, 0x71,
	0x25, 0xf5, 0xc1, 0x30, 0x6c, 0x58, 0x0b, 0x83, 0xde, 0xe0, 0x88, 0xf3, 0x85, 0xc3, 0x73, 0xda,
	0x79, 0x03, 0x55, 0x6e, 0xaf, 0xdd, 0xeb, 0xb1, 0x49, 0x98, 0xfc, 0x27, 0xb3, 0x37, 0xa1, 0x34,
	0xf6, 0xe2, 0xf8, 0x27, 0x1f, 0xc1, 0xa9, 0xb8, 0x92, 0x72, 0x7e, 0xd3, 0x61, 0x8d, 0xdb, 0x7c,
	0x15, 0xbe, 0x63, 0xe4, 0x09, 0x54, 0xe8, 0x45, 0x42, 0x43, 0x04, 0x51, 0x44, 0x75, 0x8b, 0x47,
	0x95, 0x0a, 0x6c, 0xef, 0xa5, 0xa7, 0x7b, 0x61, 0x12, 0xcd, 0xdc, 0x4c, 0x9a, 0x67, 0x7c, 0x12,
	0xcb, 0x8a, 0xa8, 0x8a, 0x8c, 0x73, 0x2d, 0x17, 0xb9, 0xfc, 0xf6, 0x3e, 0x0d, 0x7d, 0x1a, 0xa5,
	0xb7, 0x0b, 0x8a, 0xe7, 0x0c, 0x43, 0x89, 0x66, 0x32, 0xd6, 0x94, 0x24, 0x0e, 0xd4, 0x58, 0xd4,
	0xf7, 0xc2, 0xe0, 0xbd, 0x97, 0x70, 0x6f, 0x8a, 0x78, 0x9c, 0xe3, 0x91, 0x1b, 0x50, 0xa4, 0x23,
	0x2f, 0x18, 0x36, 0x4a, 0x78, 0x28, 0x08, 0xce, 0x1d, 0x9f, 0xb3, 0x90, 0x36, 0xca, 0x82, 0x8b,
	0x84, 0xfd, 0x14, 0xea, 0x79, 0xe7, 0x79, 0x15, 0x0e, 0xe8, 0x4c, 0x42, 0xc7, 0x3f, 0xb9, 0xe6,
	0xd4, 0x1b, 0x4e, 0x52, 0xe0, 0x04, 0xf1, 0x8d, 0xbe, 0xab, 0x39, 0x7f, 0xe9, 0x00, 0x9d, 0x61,
	0x40, 0xc3, 0x04, 0x71, 0xfa, 0x76, 0x19, 0xa7, 0x3b, 0x58, 0xe3, 0x73, 0x91, 0x15, 0x48, 0xdd,
	0x05, 0xe8, 0xa1, 0x1c, 0x2f, 0x2c, 0x79, 0x95, 0xc2, 0x21, 0x0f, 0x60, 0x5d, 0x50, 0x6f, 0x95,
	0x6a, 0xae, 0xb8, 0x79, 0x26, 0x47, 0x94, 0xc5, 0x68, 0x41, 0x00, 0x27, 0x29, 0x72, 0x1b, 0x2a,
	0x2c, 0x4e, 0x35, 0x05, 0x68, 0x19, 0x83, 0xdf, 0xed, 0x53, 0xde, 0xe9, 0xa8, 0x29, 0x60, 0x53,
	0x38, 0x1c, 0x75, 0x41, 0x1d, 0x89, 0xfe, 0x16, 0x10, 0xe6, 0x78, 0xd7, 0x44, 0xf2, 0x09, 0x94,
	0x4f, 0x68, 0x8c, 0xce, 0x58, 0x60, 0xc4, 0x81, 0x9f, 0xaa, 0xc5, 0x81, 0xcf, 0x9d, 0x1f, 0xb2,
	0x7e, 0x10, 0x9e, 0x06, 0xb2, 0x7a, 0x0d, 0x37, 0x63, 0x38, 0xff, 0x68, 0x50, 0xed, 0x9c, 0x7b,
	0xc9, 0x21, 0x8d, 0x63, 0x3e, 0x9a, 0x9e, 0x2e, 0x67, 0xe1, 0x2e, 0x66, 0x21, 0x93, 0x59, 0x91,
	0x86, 0x3a, 0xe8, 0x81, 0x2f, 0x2f, 0xd1, 0x03, 0x9f, 0x37, 0x0d, 0x0e, 0x00, 0x31, 0x3b, 0xc4,
	0x98, 0xc9, 0x1a, 0xcc, 0x5c, 0x6c, 0xb0, 0x77, 0x11, 0x1b, 0x49, 0x7c, 0xf1, 0x9b, 0xdb, 0x4b,
	0x98, 0x84, 0x54, 0x4f, 0x58, 0x3a, 0xe4, 0xca, 0xf3, 0x21, 0x77, 0x4d, 0xe0, 0x7e, 0x00, 0x68,
	0xf7, 0x06, 0x69, 0xec, 0x97, 0x79, 0xa6, 0x2d, 0x79, 0xa6, 0xcf, 0x3d, 0x13, 0x91, 0x1b, 0x69,
	0xe4, 0xce, 0xef, 0x1a, 0x54, 0x5e, 0x52, 0x2f, 0x4a, 0xce, 0xa8, 0xb7, 0x72, 0xa8, 0xa0, 0x65,
	0x5d, 0xb1, 0x7c, 0x03, 0x8a, 0x41, 0xe8, 0xd3, 0x0b, 0x69, 0x4c, 0x10, 0x4a, 0x81, 0x07, 0x72,
	0x86, 0x19, 0xae, 0xc2, 0xe1, 0xe7, 0x7c, 0xdf, 0xd0, 0x08, 0xcf, 0x8b, 0xe2, 0x3c, 0xe3, 0xf0,
	0x22, 0x0c, 0xe9, 0x45, 0xf2, 0x7c, 0x12, 0x89, 0xd6, 0x2f, 0xa1, 0x44, 0x8e, 0xe7, 0xfc, 0xad,
	0x41, 0xf9, 0xb0, 0xdb, 0xc1, 0x6e, 0xdc, 0x5d, 0xae, 0x03, 0x9b, 0xd7, 0x81, 0x3c, 0x5f, 0x51,
	0x03, 0x59, 0xac, 0x7a, 0x2e, 0xd6, 0x05, 0x84, 0xe6, 0xb5, 0x61, 0x2a, 0xb5, 0x91, 0x0e, 0xd9,
	0x62, 0x36, 0x64, 0xaf, 0x99, 0xe1, 0x7d, 0x0c, 0x09, 0x37, 0xcb, 0x6d, 0x30, 0xc7, 0x5e, 0x5f,
	0x6c, 0x23, 0x39, 0x4d, 0xf9, 0x36, 0x76, 0x91, 0x4b, 0xee, 0x80, 0x31, 0x9a, 0xf4, 0x1a, 0x7a,
	0xb6, 0x76, 0x64, 0xa8, 0x2e, 0xe7, 0x3b, 0xaf, 0xa1, 0xe4, 0xb2, 0x38, 0xa1, 0xd1, 0x7c, 0x28,
	0x6b, 0x1f, 0x1c, 0xca, 0x8e, 0x8c, 0x4a, 0xc7, 0x95, 0x57, 0xe7, 0xa7, 0x42, 0x4f, 0xd9, 0x78,
	0x2f, 0x01, 0x04, 0xef, 0x0a, 0x6e, 0x65, 0x2b, 0xc0, 0x58, 0xbe, 0xad, 0x79, 0x0b, 0xe0, 0xc4,
	0x1f, 0xa4, 0x83, 0xa8, 0x08, 0xda, 0x8f, 0x56, 0x81, 0x94, 0x40, 0x7f, 0xbb, 0x63, 0x69, 0x4d,
	0x1b, 0x4c, 0xfe, 0x3e, 0xe0, 0xf4, 0xf1, 0x77, 0x56, 0x81, 0x00, 0x94, 0xf6, 0xbd, 0x60, 0x48,
	0x7d, 0x4b, 0x6b, 0xfe, 0xaa, 0xcd, 0xb7, 0xee, 0xa9, 0x00, 0xbe, 0xae, 0x90, 0xed, 0x83, 0x03,
	0xab, 0x40, 0x6e, 0x80, 0xa5, 0xf0, 0x70, 0xa3, 0x5b, 0x1a, 0xf9, 0x3f, 0x6c, 0x28, 0x5c, 0xee,
	0x8b, 0xa5, 0x93, 0x4f, 0xe0, 0x7f, 0xea, 0x62, 0xc7, 0xe0, 0x2c, 0x83, 0xdc, 0x04, 0xa2, 0xb0,
	0x65, 0x9b, 0x59, 0xe6, 0xc2, 0x6d, 0x87, 0xdd, 0x8e, 0x55, 0x6c, 0x7e, 0x95, 0x82, 0x82, 0xfe,
	0xac, 0x81, 0x79, 0xc4, 0x42, 0x6a, 0x15, 0xf8, 0xd7, 0x33, 0x96, 0x9c, 0x5b, 0x1a, 0xa9, 0x40,
	0xf1, 0xd9, 0x90, 0xf5, 0x06, 0x96, 0x2e, 0x3e, 0xbd, 0xde, 0xc0, 0x32, 0x5a, 0x7b, 0x50, 0x43,
	0xd7, 0x4e, 0xc4, 0x6b, 0x8b, 0x7c, 0x09, 0xf5, 0x17, 0x34, 0x51, 0x5f, 0x14, 0x96, 0xf2, 0x86,
	0x40, 0x51, 0x5b, 0x7d, 0x89, 0x70, 0x11, 0xa7, 0xd0, 0xfa, 0x59, 0x17, 0xcf, 0x80, 0xd4, 0xcc,
	0x43, 0x28, 0x9d, 0x04, 0xfd, 0xb0, 0x3b, 0x26, 0x1b, 0x29, 0xe6, 0xf2, 0x85, 0x60, 0x03, 0x26,
	0x15, 0xdf, 0x64, 0x4e, 0x21, 0x15, 0x7c, 0x15, 0x5e, 0x26, 0xf8, 0x08, 0xea, 0x2e, 0xed, 0x07,
	0x3c, 0x44, 0xb1, 0xd2, 0x48, 0x3d, 0xbf, 0xde, 0x6c, 0xac, 0x3a, 0x39, 0xc8, 0x9d, 0x02, 0xd9,
	0x84, 0xf2, 0x0b, 0x2a, 0x76, 0xe3, 0x3c, 0xef, 0x76, 0x4d, 0x7d, 0x3a, 0x38, 0x05, 0xd2, 0x04,
	0xe8, 0x8e, 0x7d, 0x2f, 0xa1, 0x28, 0x97, 0x3b, 0x5d, 0x92, 0x7d, 0x00, 0xa5, 0x03, 0xd6, 0x67,
	0x93, 0x64, 0x41, 0x2e, 0xe7, 0x67, 0xeb, 0x0f, 0x0d, 0xea, 0x32, 0x55, 0x29, 0x18, 0x5f, 0x40,
	0xed, 0x38, 0x54, 0x06, 0x25, 0x3a, 0x9e, 0xd1, 0xf6, 0x02, 0xed, 0x14, 0xb6, 0xb4, 0xcf, 0x35,
	0xf2, 0x35, 0xac, 0x1f, 0x87, 0xea, 0x6e, 0xd9, 0x58, 0x58, 0x24, 0xf6, 0x22, 0x43, 0x2a, 0xee,
	0x40, 0xf5, 0x38, 0xcc, 0x86, 0xe7, 0x3a, 0x97, 0x9a, 0x93, 0x76, 0x9e, 0x14, 0x2a, 0xad, 0x3f,
	0x75, 0x80, 0xc3, 0x6e, 0x27, 0x75, 0xf8, 0x1e, 0x98, 0x98, 0xfa, 0x79, 0x37, 0xd9, 0x69, 0x47,
	0x8b, 0x74, 0x73, 0x28, 0x3a, 0x11, 0xf5, 0x12, 0x4a, 0xd4, 0x56, 0xb7, 0x55, 0x02, 0xa5, 0xca,
	0xcf, 0x69, 0x9c, 0x44, 0x6c, 0x96, 0x17, 0xcb, 0x27, 0x76, 0x2b, 0x97, 0x82, 0x55, 0xf6, 0x3e,
	0x05, 0xf3, 0x35, 0x0b, 0xc2, 0x55, 0xc6, 0x36, 0xa1, 0x78, 0x40, 0xbd, 0x29, 0x5d, 0x95, 0x22,
	0xf2, 0x10, 0x2a, 0x6d, 0xdf, 0x3f, 0xa4, 0xfc, 0xe9, 0xb0, 0x52, 0xb0, 0x09, 0x35, 0x97, 0x8e,
	0xd8, 0x94, 0x5e, 0x2e, 0xdb, 0xfa, 0x45, 0x87, 0x75, 0xd1, 0x81, 0x29, 0x8a, 0xce, 0x12, 0x8a,
	0xca, 0x3c, 0x93, 0x40, 0xde, 0x01, 0xa3, 0xed, 0xfb, 0x4a, 0x81, 0xe6, 0x1d, 0xb8, 0xcf, 0xff,
	0x5e, 0xb8, 0x03, 0x1f, 0x95, 0x70, 0x60, 0xad, 0xed, 0xfb, 0xd8, 0xd8, 0x1f, 0x95, 0xf9, 0x0c,
	0xaa, 0xc2, 0xca, 0x6a, 0xb1, 0xd4, 0x94, 0x77, 0x35, 0x53, 0x2b, 0xc4, 0xce, 0x4a, 0xf8, 0xd3,
	0xf6, 0xf8, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x7f, 0xa7, 0xa2, 0xc8, 0x0d, 0x00, 0x00,
}
